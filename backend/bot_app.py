import hashlib
import hmac
from urllib.parse import parse_qs, unquote
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, PreCheckoutQueryHandler, CommandHandler, CallbackContext, MessageHandler, filters

from db.base import AsyncSessionFactory
from db import UserManager
from settings import BOT_TOKEN, WEB_APP_URL, ADMIN_ID

TELEGRAM_BOT_SECRET = hmac.new(b"WebAppData", BOT_TOKEN.encode(), hashlib.sha256).digest()

application = Application.builder().token(BOT_TOKEN).build()

def check_telegram_signature(init_data):
    parsed_data = parse_qs(init_data)
    hash_received = parsed_data.pop("hash", [""])[0].strip()
    if not hash_received:
        return False
    data_check_string = "\n".join(
        f"{key}={unquote(value[0])}" for key, value in sorted(parsed_data.items())
    )
    computed_hash = hmac.new(TELEGRAM_BOT_SECRET, data_check_string.encode(), hashlib.sha256).hexdigest()
    return computed_hash == hash_received


async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [
        [
            InlineKeyboardButton(
                "–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app={"url": WEB_APP_URL}
            )
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üé¨ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MovieAI!*\n\n"
        "–ü–æ–¥–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é –∏–ª–∏ –∂–∞–Ω—Ä—É ‚Äî —Å –ø–æ–º–æ—â—å—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–±–æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.\n\n",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def help_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "‚ùì *–ß—Ç–æ —É–º–µ–µ—Ç MovieAI*\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤:\n"
        "‚Ä¢  –ü–æ –∂–∞–Ω—Ä—É, –∞—Ç–º–æ—Å—Ñ–µ—Ä–µ, –≥–æ–¥—É –∏ –¥—Ä—É–≥–∏–º —Ñ–∏–ª—å—Ç—Ä–∞–º\n"
        "‚Ä¢  –ü–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é ‚Äî –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ\n"
        "‚Ä¢  –ü–æ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–º—É—Å—è —Ñ–∏–ª—å–º—É ‚Äî –Ω–∞–π–¥—ë—Ç –ø–æ—Ö–æ–∂–∏–µ\n\n"
        "‚ù§Ô∏è –í –ø–æ–¥–±–æ—Ä–µ ‚Äî –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Ñ–∏–ª—å–º—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –ª—É—á—à–∏–µ –Ω–∞—Ö–æ–¥–∫–∏.\n\n"
        "–£ –≤–∞—Å –µ—Å—Ç—å –∏–¥–µ—è, –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ? \n–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±–æ—Ç—É ‚Äî –æ–Ω –≤—Å—ë —á–∏—Ç–∞–µ—Ç!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ /start, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n",
        parse_mode="Markdown"
    )

async def pre_checkout_handler(update: Update, context: CallbackContext):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def message_handler(update: Update, context: CallbackContext) -> None:
    bot = context.bot
    msg = update.message
    user_id = msg.chat.id

    if msg and msg.text:
        feedback_text = f"üó£ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{msg.from_user.username} ({user_id}):\n\n{msg.text}"
        await bot.send_message(chat_id=ADMIN_ID, text=feedback_text)
        await msg.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ú—ã –≤—Å—ë —É—á—Ç—ë–º üôå")

    #charge_id = msg.text
    #await bot.refund_star_payment(user_id=user_id, telegram_payment_charge_id=charge_id)

async def successful_payment_handler(
        update: Update,
        context: CallbackContext
)  -> None:
    payment = update.message.successful_payment
    user_id = update.message.chat.id

    provider_payment_charge_id = payment.provider_payment_charge_id
    telegram_payment_charge_id = payment.telegram_payment_charge_id
    total_amount = payment.total_amount
    currency = payment.currency

    async with AsyncSessionFactory() as session:
        async with session.begin():
            user_manager = UserManager(session=session)
            saved = await user_manager.save_payment(
                user_id=user_id,
                provider_payment_charge_id=provider_payment_charge_id,
                telegram_payment_charge_id=telegram_payment_charge_id,
                total_amount=total_amount,
                currency=currency
            )
            if saved:
                await user_manager.update_balance(user_id=user_id, delta=total_amount)

    await context.bot.send_message(
        chat_id=user_id,
        text=f"üéâ –ü–ª–∞—Ç—ë–∂ –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {total_amount} –∑–≤–µ–∑–¥ ‚≠êÔ∏è"
    )

def main():
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(PreCheckoutQueryHandler(pre_checkout_handler))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_handler))
    application.add_handler(MessageHandler(filters.ALL, message_handler))
    application.run_polling()

if __name__ == "__main__":
    main()